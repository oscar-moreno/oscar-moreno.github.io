<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Oscar Moreno - iOS Developer ï£¿</title><description>Articles about Swift and Apple development</description><link>http://oscarmoreno.com</link><language>en</language><lastBuildDate>Wed, 8 Mar 2023 08:26:07 +0100</lastBuildDate><pubDate>Wed, 8 Mar 2023 08:26:07 +0100</pubDate><ttl>250</ttl><atom:link href="http://oscarmoreno.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">http://oscarmoreno.com/blog/swift-collection-types</guid><title>Swift collection types</title><description>Swift has three collection types to manage common values.</description><link>http://oscarmoreno.com/blog/swift-collection-types</link><pubDate>Mon, 6 Mar 2023 08:00:00 +0100</pubDate><content:encoded><![CDATA[<p>The collections are one of the most used data structure when you are programming so, it is extremely important know the different approach you dispose to work with them.</p><p>Collection types are complex data types, and Swift allow use three collection types: Arrays, Sets and Dictionaries for manage related values.</p><p>The reliability of these collections is based on the types of values and keys that you can store. When you create an instance of a collection, you need to confirm the type of values that it manages. This means that: you cannot store different types that you previously defined, and you can be sure the type of data you will retrieve when you manage a collection.</p><p>Also, thanks to type inference, you can specify the type, or Swift will infere the type.</p><h2>Collection Mutability</h2><p>As well as variables and constants, collections can be mutable or unmutable depending on how was created.</p><p>If you store an array, set or a dictionary in a variable, you can mutate the collection, because you can add, remove or change a single or multiple values in these collection.</p><p>But, if you store it in a constant, you cannot add new elements or modify the ones with was instantiated.</p><h2>Diferences between arrays, sets and dictionaries</h2><p>Arrays are ordered collections, where duplications are allowed and values can be accessed by a numeric index (position in the array)</p><p>Sets are unordered collections where duplications are no allowed, and values can be iterated, but cannot be accesed by an index or key.</p><p>Dictionaries are unordered collections composed by key-value associations.</p><h2>Fundamentals of different collection types</h2><h3>Arrays</h3><p>If you want to create an empty array, you will need specify the data type. There are different ways to create an empty array, this a example.</p><pre><code><span class="keyword">var</span> numbers = [<span class="type">Int</span>]()
</code></pre><p>But, if you want to create it with values, you don't need specify the types. Next, you can see how to create an strings array</p><pre><code><span class="keyword">var</span> tutorials = [<span class="string">"SwiftUI"</span>, <span class="string">"Combine"</span>, <span class="string">"AsyncAwait"</span>] 
</code></pre><p>And, if you need to access to a value, you must indicate the position of the value in the array. But, remember that collections index starts by 0.</p><pre><code><span class="keyword">let</span> firstCourse = tutorials[<span class="number">0</span>]
</code></pre><p>The above code will store "SwiftUI" in <code></code><code>firstCourse</code><code></code> constant.</p><h3>Sets</h3><p>Again, you will need specify data type for create an empty set.</p><pre><code><span class="keyword">var</span> numbers = <span class="type">Set</span>&lt;<span class="type">Int</span>&gt;()
</code></pre><p>Create a set with values, is similar to create an array but, in this case, you will need to specify that is a set to don't create an array</p><pre><code><span class="keyword">var</span> tutorials = [<span class="string">"SwiftUI"</span>, <span class="string">"Combine"</span>, <span class="string">"AsyncAwait"</span>] 
</code></pre><p>But, in this case, as sets have not an index, you cannot use it to access to the data. At least, you can check if the value exists.</p><pre><code><span class="keyword">var</span> swiftuiExists = tutorials.<span class="call">contains</span>(<span class="string">"SwiftUI"</span>)
</code></pre><p>The above code wil store true in <code></code><code>swiftuiExists</code><code></code> variable</p><h3>Dictionaries</h3><p>And, lastly, you can create an empty dictionary specifying both the key type and the value type</p><pre><code><span class="keyword">var</span> nameOfNumbers = [<span class="type">Int</span>: <span class="type">String</span>]()
</code></pre><p>To create a dictionary with values, it is also similar to an array, but you have to write the key of each value. Remember that the keys must be uniques.</p><pre><code><span class="keyword">var</span> requirements = [<span class="string">"View"</span>:<span class="string">"SwiftUI"</span>, <span class="string">"Database"</span>:<span class="string">"CoreData"</span>, <span class="string">"AugmentedReality"</span>:<span class="string">"ARKit"</span>]
</code></pre><p>And, if you want to access to a value, you only need know the index</p><pre><code><span class="keyword">let</span> database = requirements[<span class="string">"Database"</span>]
</code></pre><hr><br/><p>In next posts, I will write about useful methods in collection types to manage arrays, sets and dictionaries.</p>]]></content:encoded></item><item><guid isPermaLink="true">http://oscarmoreno.com/blog/useful-strings-methods-swift</guid><title>Useful String methods in Swift</title><description>Learn useful String methods in Swift to display data as you need.</description><link>http://oscarmoreno.com/blog/useful-strings-methods-swift</link><pubDate>Mon, 20 Feb 2023 08:00:00 +0100</pubDate><content:encoded><![CDATA[<p>This post is a complement for the previous one about <a href="../swift-strings">Swift Strings</a>.</p><p>I real-world projects, you can store a lot of strings but, it is important that you know how to transform those strings, to display them according to your view.</p><p>For this reason, let's see usual methods that you can use for it.</p><h2>Count characters</h2><p>Because a String is a Collection of Characters, you can use a very common method in Arrays: <code>count()</code></p><p>Either you can use it in a constant/variable or in a String</p><pre><code><span class="keyword">let</span> starWarsIntro = <span class="string">"A long time ago..."</span>
<span class="keyword">let</span> numberOfCharacters = starWarsIntro.<span class="call">count</span>()  <span class="comment">// numberOfCharacters value 18</span>

<span class="keyword">let</span> numberOfCharactersOfGreet = <span class="string">"Hello World!"</span>.<span class="call">count</span>() <span class="comment">// numberOfCharactersOfGreet value is 12</span>
</code></pre><p>Even you can combine values in the same String through String interpolation:</p><pre><code><span class="keyword">let</span> plotTwist = <span class="string">"I am your father"</span>
<span class="call">print</span>(<span class="string">"The number of character in</span> \(plotTwist) <span class="string">is</span> \(plotTwist)<span class="string">.count()"</span>)

<span class="comment">// It will print "The number of character in I am your father is 16"</span>
</code></pre><h2>Insert or remove</h2><p>Also it is important add or remove characters or substrings</p><h3>Insert</h3><p>For insert, you can: - Insert a character with the method <code>.insert(_ newElement:at:)</code> - Insert a substring with the method <code>.insert(contentsOf:at:)</code></p><p>In <code>at</code> you will need to write a index. You can know more about indexes in <a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/stringsandcharacters/#String-Indices">Swift official Documentation - String Indices</a></p><pre><code><span class="keyword">var</span> warning = <span class="string">"we have a problem"</span>
warning.<span class="call">insert</span>(contentsOf: <span class="string">"Houston, "</span>, at: warning.<span class="property">startIndex</span>)

<span class="call">print</span>(warning) <span class="comment">// It will print "Houston, we have a problem"</span>
</code></pre><h3>Remove</h3><p>Similar to insert, for remove Swift allow remove characters of substrings: - Remove a character with the method <code>.remove(:at:)</code> - Remove a substring with the method <code>removeSubrange(_ bounds:)</code></p><p>Be careful with don't exit out of bounds</p><pre><code><span class="keyword">var</span> greeting = <span class="string">"Hello World!"</span>
greeting.<span class="call">remove</span>(at: greeting.<span class="call">index</span>(before: greeting.<span class="property">endIndex</span>))
<span class="call">print</span>(greeting)  <span class="comment">// It will print "Hello World"</span>
</code></pre><h2>Modify strings</h2><h3>Uppercase and lowercase</h3><p>The methods that you can use for it are <code>.uppercased()</code>, <code>.lowercased()</code> or <code>.capitalized()</code></p><p>Examples:</p><pre><code><span class="keyword">let</span> lordOfTheRings = <span class="string">"A ring to rule them all"</span>
<span class="call">print</span>(lordOfTheRings.<span class="call">uppercased</span>()) <span class="comment">// It will print "A RING TO RULE THEM ALL"</span>
<span class="call">print</span>(lordOfTheRings.<span class="call">lowercased</span>()) <span class="comment">// It will print "a ring to rule them all"</span>
<span class="call">print</span>(lordOfTheRings.<span class="property">capitalized</span>) <span class="comment">// It will print "A Ring To Rule Them All"</span>
</code></pre><h3>Extract a string to an array</h3><p>For this goal you can use <code>.components(separatedBy: " ")</code></p><pre><code><span class="keyword">let</span> et = â<span class="type">E</span>.<span class="type">T</span>. <span class="property">phone</span> home.â
<span class="keyword">let</span> etWords = et.<span class="call">components</span>(separatedBy: <span class="string">" "</span>)

<span class="comment">// etWords value is equal to ["E.T.", "phone", "home."]</span>
</code></pre><h3>Replacing occurrences</h3><p>In this case, a useful method is <code>.replacingOccurrences(of:, with:)</code>, you can replace a character or a string with another character or string</p><pre><code><span class="keyword">let</span> darkKnight = <span class="string">"I am Batman"</span>
<span class="keyword">let</span> coded = darkKnight.<span class="call">replacingOccurrences</span>(of: <span class="string">"a"</span>, with: <span class="string">"4"</span>)

<span class="comment">// coded value is equal to "I 4m B4tm4n"</span>
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">http://oscarmoreno.com/blog/swift-strings</guid><title>Swift Strings</title><description>As other languages, Strings are a fundamental type that allows save text</description><link>http://oscarmoreno.com/blog/swift-strings</link><pubDate>Mon, 6 Feb 2023 08:00:00 +0100</pubDate><content:encoded><![CDATA[<p>When you save a text in a constant or a variable, your are saving a string in Swift. Furthermore, you can see a string as a serie of characters. For that reason, you can access to the content of a string in various ways, such as Collection (Array i.e.) of characters.</p><h2>Initialize a String</h2><p>A string literal is a text writed with a double quote at beginning and at the end. So, if you need to save a text in a constant or a variable, you only must to assign a string literal to it.</p><pre><code><span class="keyword">let</span> coach = <span class="string">"Ted Lasso"</span>
<span class="keyword">var</span> team = <span class="string">"AFC Richmond"</span>
</code></pre><p><em>NOTE: It is fundamental remember that strings are case sensitive. So, "a simple string" it is different of "A simple string".</em></p><h2>Concatenating strings</h2><p>If you need to save the value of two strings in another constant or variable, you can concatenate it.</p><p>It is as easy as use the operator <code>+</code> between the two values when you have to assign it.</p><pre><code><span class="keyword">let</span> name = <span class="string">"Michael"</span>
<span class="keyword">let</span> lastName = <span class="string">"Scott"</span>

<span class="keyword">let</span> funnyBoss = name + lastName
</code></pre><p>Another way, it is to use the operator <code>+=</code> to add text to a previous initialized string</p><pre><code><span class="keyword">var</span> spy = <span class="string">"Bond"</span>
spy += <span class="string">", James Bond"</span>
</code></pre><p>In the above example, the final value of <code>spy</code> is <code>Bond, James Bond</code></p><p>And, as a String is a Collection of characters, you can also use the method <code>.append()</code></p><pre><code><span class="keyword">var</span> greet = <span class="string">"Hello, world"</span>
greet.<span class="call">append</span>(<span class="string">"!"</span>)
</code></pre><p>In the last code, greet value is <code>Hello, world!</code></p><h2>String interpolation</h2><p>But maybe the most used feature in Strings could be String interpolation. It allows use constants or variables values inside a string.</p><p>In this case, you can do it, writing the constant or variable name, inside parenthesis "()", and starting with a backlash "". That is <code>\(variableName)</code></p><pre><code><span class="keyword">let</span> name = <span class="string">"Forest"</span>
<span class="keyword">let</span> fullName = <span class="string">"Forest Gump"</span>

<span class="keyword">let</span> introduction = <span class="string">"Hello, I am</span> \(name)<span class="string">,</span> \(fullName)<span class="string">"</span>
</code></pre><p>The final value of <code>introduction</code> is <code>"Hello, I am Forest, Forest Gump"</code></p><h2>Multiline String</h2><p>Finishing (althought it is not used often in real world apps) maybe sometimes you need to save larger texts in a string, and it could be difficult read the value for others programmers o for yourself. In this case, you can use a multiline string.</p><p>To save a multiline string, you only need to write three quotation marks at the beginning, and finish with another three in a single line. For example:</p><pre><code><span class="keyword">let</span> text = <span class="string">"""
To be, or not to be, that is the question:
Whether 'tis nobler in the mind to suffer
The slings and arrows of outrageous fortune,
Or to take arms against a sea of troubles,
And by opposing end them? To die, to sleep;
"""</span>
</code></pre><p>First triple double quotes doesn't need to be in a single line, but it helps to focus in text value.</p><hr><br/><p>You can see useful methods in the post <a href="../useful-strings-methods-swift">Useful String methods in Swift</a></p>]]></content:encoded></item><item><guid isPermaLink="true">http://oscarmoreno.com/blog/numbers-in-swift</guid><title>Numbers in Swift</title><description>Programming has been often for process numbers and obtain results so difficult to calculate for humans</description><link>http://oscarmoreno.com/blog/numbers-in-swift</link><pubDate>Mon, 30 Jan 2023 08:00:00 +0100</pubDate><content:encoded><![CDATA[<p>Programming has been often for process numbers and obtain results so difficult to calculate for humans: universe distances, planet radius, piâ¦</p><p>So, is part of fundamental learning, in Swift in particular and in programming globally.</p><p>There are basically 2 types of numbers in Swift: Integers and Floating-Point numbers. Each one represents a different range and is used for different targets.</p><h2>Integers</h2><p>A integer number (also called int, for short) is possibly the most used number. We could say that it is the most simple, because has no fractional component.</p><p>It can be positive, zero, or negative. For example, integer numbers are: 5, -3, 99, -256â¦</p><p>Also, Swift provides signed and unsigned integers for 8,16, 32 and 64 bit. Following naming convention of C, the type of 8 bit unsigned number is UInt8, whereas 16 bit signed is Int16. But, is not frequently used in most of developed apps.</p><h3>Integers range</h3><p>It depends of bits number, but each one has a max and min number to store. You can check it in next list.</p><ul><li><strong>UInt8</strong>: from 0 to 255</li><li><strong>UInt16</strong>: from 0 to 65535</li><li><strong>UInt32</strong>: from 0 to 4294967295</li><li><strong>UInt64</strong>: from 0 to 18446744073709551615</li><li><strong>Int8</strong>: from -128 to 127</li><li><strong>Int16</strong>: from -32768 to 32767</li><li><strong>Int32</strong>: from -2147483648 to 2147483647</li><li><strong>Int64</strong>: from -9223372036854775808 to 9223372036854775807</li></ul><br/><p>But, if you donât remember the values, you can use the methods .max or .min</p><pre><code><span class="keyword">let</span> minValue = <span class="type">Int</span>.<span class="property">min</span> <span class="comment">//minValue is equal to</span>
<span class="keyword">let</span> maxValue = <span class="type">Int</span>.<span class="property">max</span> <span class="comment">//maxValue is equal to</span>
</code></pre><h2>Floating-Point numbers</h2><p>Unlike integers, floating-point numbers has a fractional component. But, like integers, can be positive or negative.<br>It exists two signed floating-point number types</p><h3>Double</h3><p>Double numbers represent a 64-bit floating-point number, and has a precision of at least 15 decimal digits.</p><h3>Float</h3><p>Float numbers represent a 32-bit floating-point number, and has a precision of at least 6 decimal digits.</p><hr><br/><p><em>NOTE: You will need Double or Float depending of multiple factors, but if either would be appropriated, Swift documentation recommends use Double.</em></p>]]></content:encoded></item><item><guid isPermaLink="true">http://oscarmoreno.com/blog/constants-and-variables-swift</guid><title>Constants and variables to save values in Swift</title><description>How to save and manage data values in Swift</description><link>http://oscarmoreno.com/blog/constants-and-variables-swift</link><pubDate>Mon, 16 Jan 2023 08:00:00 +0100</pubDate><content:encoded><![CDATA[<p>Programming is a way to manage data, and usually, you need save multiple values temporally: to manage it after other operations, to display itâ¦</p><p>For this matter, as another programming languages, Swift is able to store values in constants and variables.</p><p>Thanks to constant and variables you are able to associate a name that you choose to a value.</p><h2>Constants</h2><p>A constant value is saved in a memory space, and it canât be modified. After a value is established in a constant, it remains immutable.</p><h3>How to declare a constant</h3><p>To declare a constant you must start with reserved word let, followed by a name you choose. Then, you must can use the operator â=â and assign a value.</p><p>In the next example, âletâ is the reserved word for constants, survivor the name of the constant, and the value that is assigned to the constant âsurvivorâ is âJack Shepardâ.</p><pre><code><span class="keyword">let</span> survivor = â<span class="type">Jack Shepard</span>â
</code></pre><p>The value is between double quotes because is a String value type. You can read about Strings in official documentation: <a href="https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html">Strings and Characters</a></p><p>Do you know why Swift use let instead const or similar as another languages? It comes from the mathematics world, where they say things like âlet x be equal to 5.â</p><h2>Variables</h2><p>A variable is a value that you can modify after have been declared. So, is a mutable value.</p><h3>How to declare a variable</h3><p>To declare a variable, the structure is the same as a constant, but you must use the reserved word âvarâ</p><p>Then, for declare a variable we can do</p><pre><code><span class="keyword">var</span> videogame = â<span class="type">Metal Gear Solid</span>â
</code></pre><p>Ok but, if we can change a var value, how should we do it? Simply, you only need assign a new value, and donât write the reserved word var</p><pre><code>videogame = â<span class="type">Uncharted</span>â
</code></pre><h2>Naming a constant or a value</h2><p>You can use almost any character for a name of constant or variable, including Unicode characters. What means that you can use for example emojis</p><p>But it is something that a I wouldnât recommend. Why? Because the name of a constant or a variable, should explain without any doubt what is stored within.</p><p>For example, which one explain what means the value 10?</p><pre><code><span class="keyword">let</span> times = <span class="number">10</span>

<span class="keyword">let</span> numberOfTimesIHaveSeenBackToTheFutureTrilogy = <span class="number">10</span>
</code></pre><p>So, donât worry about numbers of characters for the name. It is more recommended use a large (but descriptive ) name than use another shorter that doesnât specify what stores. And, nowadays, IDEâs are in charge to autocomplete names, it wonât be difficult write them ð</p>]]></content:encoded></item><item><guid isPermaLink="true">http://oscarmoreno.com/blog/my-new-first-post</guid><title>My (new) first post</title><description>Who I am and why I have relaunch my blog</description><link>http://oscarmoreno.com/blog/my-new-first-post</link><pubDate>Mon, 2 Jan 2023 08:00:00 +0100</pubDate><content:encoded><![CDATA[<p>Hi! I am very happy today, because I have refactored my blog ð</p><p>This is not my first experience writing in my blog but, 2022 was a year with changes and new challenges in my working life so, I decided restart my blog to align it with what I am doing day by day.</p><p>For this reason, this is my first post, but only in this new version of my blog.</p><h2>About me</h2><p>If I have to talk about me in a sentence, I like to say that I am a passionate about programming and tech world.</p><p>Nowadays, I work as iOS Developer at <a href="http://www.hiberus.com">Hiberus</a>, a global consultancy company founded in Spain, but growing quickly and opening new offices in places such as BerlÃ­n, London, MÃ©xico DF or Miami.</p><p>But, my work experience have been mainly focused in IT. Besides programming, I have previous experience working as QA or DevOps engineer.</p><p>Recently, because I'm a enthusiastic user of Apple products, I decided to learn Swift, and specialize in their ecosystem development. Not only for iOS devices, but for MacOS or the rest of Apple operating systems.</p><h3>My personal life</h3><p>I was born in Valencia (Spain), where I live, at 80âs, the age of Spectrum, Atari and the first Sega's or Nintendo videoconsoles. So, I grow up and enjoyed play videogames with my Sega Megadrive, watch cartoons as He-man, Dragon Ball or Captain Tsubasa.</p><p>I'm the proud father of Lucas ð¶ð», my 2 years son that became the home CEO, and the proud husband of Lorena, the best life companion that I could have. A wonderfull woman, with a special power to treat with the childhood (And with me ð)</p><p>Nowadays, I spend my non-working hours with my family or my hobbies, such as: enjoying TV Series, playing chess or watching Formula 1 races.</p><h2>Why I write in this blog</h2><h3>Knowledge</h3><p>The first reason (and the most important) is for learning. I think that there are 3 levels of knowledge: - 1st: When someone teach you something, or you learn it watching a video or reading a book - 2nd: When you are able to do what you have learned - 3rd: When you are able to teach someone what you know.</p><p>And, for this reason, write in a blog help me to learn teaching others.</p><h3>To help</h3><p>The second one, is helping others what today I love: programming. I think that everybodyâs like help others, and also, this my way to extend the help that I receive from others.</p><h3>Express my opinion</h3><p>Another reason is, as iOS Developer, I need to have a deep understand about the Apple ecosystem so, this will be a place to organize my thoughts about the news, products, events as WWDCâ¦ but ever focused in coding</p><h3>Practice english</h3><p>And the last reason, (but no less important), practice to write tech documentation in English. My native language is Spanish, but globalization and remote working has opened a lot of opportunities. And English is today the key language for learn and work.<br><br>---</p><p>If you wanna know more about me, feel free to check my social media links (see the footer)</p><p>So, I hope you enjoy my posts! ð</p>]]></content:encoded></item></channel></rss>