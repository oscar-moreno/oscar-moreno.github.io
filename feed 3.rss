<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Oscar Moreno - iOS Developer Ô£ø</title><description>Articles about Swift and Apple development</description><link>http://oscarmoreno.com</link><language>en</language><lastBuildDate>Wed, 1 Feb 2023 20:14:34 +0100</lastBuildDate><pubDate>Wed, 1 Feb 2023 20:14:34 +0100</pubDate><ttl>250</ttl><atom:link href="http://oscarmoreno.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">http://oscarmoreno.com/blog/numbers-in-swift</guid><title>Numbers in Swift</title><description>Programming has been often for process numbers and obtain results so difficult to calculate for humans</description><link>http://oscarmoreno.com/blog/numbers-in-swift</link><pubDate>Sun, 30 Jan 2022 08:00:00 +0100</pubDate><content:encoded><![CDATA[<p>Programming has been often for process numbers and obtain results so difficult to calculate for humans: universe distances, planet radius, pi‚Ä¶</p><p>So, is part of fundamental learning, in Swift in particular and in programming globally.</p><p>There are basically 2 types of numbers in Swift: Integers and Floating-Point numbers. Each one represents a different range and is used for different targets.</p><h2>Integers</h2><p>A integer number (also called int, for short) is possibly the most used number. We could say that it is the most simple, because has no fractional component.</p><p>It can be positive, zero, or negative. For example, integer numbers are: 5, -3, 99, -256‚Ä¶</p><p>Also, Swift provides signed and unsigned integers for 8,16, 32 and 64 bit. Following naming convention of C, the type of 8 bit unsigned number is UInt8, whereas 16 bit signed is Int16. But, is not frequently used in most of developed apps.</p><h3>Integers range</h3><p>It depends of bits number, but each one has a max and min number to store. You can check it in next list.</p><ul><li><strong>UInt8</strong>: from 0 to 255</li><li><strong>UInt16</strong>: from 0 to 65535</li><li><strong>UInt32</strong>: from 0 to 4294967295</li><li><strong>UInt64</strong>: from 0 to 18446744073709551615</li><li><strong>Int8</strong>: from -128 to 127</li><li><strong>Int16</strong>: from -32768 to 32767</li><li><strong>Int32</strong>: from -2147483648 to 2147483647</li><li><strong>Int64</strong>: from -9223372036854775808 to 9223372036854775807</li></ul><br/><p>But, if you don‚Äôt remember the values, you can use the methods .max or .min</p><pre><code><span class="keyword">let</span> minValue = <span class="type">Int</span>.<span class="property">min</span> <span class="comment">//minValue is equal to</span>
<span class="keyword">let</span> maxValue = <span class="type">Int</span>.<span class="property">max</span> <span class="comment">//maxValue is equal to</span>
</code></pre><h2>Floating-Point numbers</h2><p>Unlike integers, floating-point numbers has a fractional component. But, like integers, can be positive or negative.<br>It exists two signed floating-point number types</p><h3>Double</h3><p>Double numbers represent a 64-bit floating-point number, and has a precision of at least 15 decimal digits.</p><h3>Float</h3><p>Float numbers represent a 32-bit floating-point number, and has a precision of at least 6 decimal digits.</p><hr><br/><p><em>NOTE: You will need Double or Float depending of multiple factors, but if either would be appropriated, Swift documentation recommends use Double.</em></p>]]></content:encoded></item><item><guid isPermaLink="true">http://oscarmoreno.com/blog/constants-and-variables-swift</guid><title>Constants and variables to save values in Swift</title><description>How to save and manage data values in Swift</description><link>http://oscarmoreno.com/blog/constants-and-variables-swift</link><pubDate>Sun, 16 Jan 2022 08:00:00 +0100</pubDate><content:encoded><![CDATA[<p>Programming is a way to manage data, and usually, you need save multiple values temporally: to manage it after other operations, to display it‚Ä¶</p><p>For this matter, as another programming languages, Swift is able to store values in constants and variables.</p><p>Thanks to constant and variables you are able to associate a name that you choose to a value.</p><h2>Constants</h2><p>A constant value is saved in a memory space, and it can‚Äôt be modified. After a value is established in a constant, it remains immutable.</p><h3>How to declare a constant</h3><p>To declare a constant you must start with reserved word let, followed by a name you choose. Then, you must can use the operator ‚Äò=‚Äò and assign a value.</p><p>In the next example, ‚Äòlet‚Äô is the reserved word for constants, survivor the name of the constant, and the value that is assigned to the constant ‚Äòsurvivor‚Äô is ‚ÄúJack Shepard‚Äù.</p><pre><code><span class="keyword">let</span> survivor = ‚Äú<span class="type">Jack Shepard</span>‚Äù
</code></pre><p>The value is between double quotes because is a String value type. You can read about Strings in official documentation: <a href="https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html">Strings and Characters</a></p><p>Do you know why Swift use let instead const or similar as another languages? It comes from the mathematics world, where they say things like ‚Äúlet x be equal to 5.‚Äù</p><h2>Variables</h2><p>A variable is a value that you can modify after have been declared. So, is a mutable value.</p><h3>How to declare a variable</h3><p>To declare a variable, the structure is the same as a constant, but you must use the reserved word ‚Äòvar‚Äô</p><p>Then, for declare a variable we can do</p><pre><code><span class="keyword">var</span> videogame = ‚Äú<span class="type">Metal Gear Solid</span>‚Äù
</code></pre><p>Ok but, if we can change a var value, how should we do it? Simply, you only need assign a new value, and don‚Äôt write the reserved word var</p><pre><code>videogame = ‚Äú<span class="type">Uncharted</span>‚Äù
</code></pre><h2>Naming a constant or a value</h2><p>You can use almost any character for a name of constant or variable, including Unicode characters. What means that you can use for example emojis</p><p>But it is something that a I wouldn‚Äôt recommend. Why? Because the name of a constant or a variable, should explain without any doubt what is stored within.</p><p>For example, which one explain what means the value 10?</p><pre><code><span class="keyword">let</span> times = <span class="number">10</span>

<span class="keyword">let</span> numberOfTimesIHaveSeenBackToTheFutureTrilogy = <span class="number">10</span>
</code></pre><p>So, don‚Äôt worry about numbers of characters for the name. It is more recommended use a large (but descriptive ) name than use another shorter that doesn‚Äôt specify what stores. And, nowadays, IDE‚Äôs are in charge to autocomplete names, it won‚Äôt be difficult write them üòâ</p>]]></content:encoded></item><item><guid isPermaLink="true">http://oscarmoreno.com/blog/my-new-first-post</guid><title>My (new) first post</title><description>Who I am and why I have relaunch my blog</description><link>http://oscarmoreno.com/blog/my-new-first-post</link><pubDate>Sun, 2 Jan 2022 08:00:00 +0100</pubDate><content:encoded><![CDATA[<p>Hi! I am very happy today, because I have refactored my blog üòâ</p><p>This is not my first experience writing in my blog but, 2022 was a year with changes and new challenges in my working life so, I decided restart my blog to align it with what I am doing day by day.</p><p>For this reason, this is my first post, but only in this new version of my blog.</p><h2>About me</h2><p>If I have to talk about me in a sentence, I like to say that I am a passionate about programming and tech world.</p><p>Nowadays, I work as iOS Developer at <a href="http://www.hiberus.com">Hiberus</a>, a global consultancy company founded in Spain, but growing quickly and opening new offices in places such as Berl√≠n, London, M√©xico DF or Miami.</p><p>But, my work experience have been mainly focused in IT. Besides programming, I have previous experience working as QA or DevOps engineer.</p><p>Recently, because I'm a enthusiastic user of Apple products, I decided to learn Swift, and specialize in their ecosystem development. Not only for iOS devices, but for MacOS or the rest of Apple operating systems.</p><h3>My personal life</h3><p>I was born in Valencia (Spain), where I live, at 80‚Äôs, the age of Spectrum, Atari and the first Sega's or Nintendo videoconsoles. So, I grow up and enjoyed play videogames with my Sega Megadrive, watch cartoons as He-man, Dragon Ball or Captain Tsubasa.</p><p>I'm the proud father of Lucas üë∂üèª, my 2 years son that became the home CEO, and the proud husband of Lorena, the best life companion that I could have. A wonderfull woman, with a special power to treat with the childhood (And with me üòÖ)</p><p>Nowadays, I spend my non-working hours with my family or my hobbies, such as: enjoying TV Series, playing chess or watching Formula 1 races.</p><h2>Why I write in this blog</h2><h3>Knowledge</h3><p>The first reason (and the most important) is for learning. I think that there are 3 levels of knowledge: - 1st: When someone teach you something, or you learn it watching a video or reading a book - 2nd: When you are able to do what you have learned - 3rd: When you are able to teach someone what you know.</p><p>And, for this reason, write in a blog help me to learn teaching others.</p><h3>To help</h3><p>The second one, is helping others what today I love: programming. I think that everybody‚Äôs like help others, and also, this my way to extend the help that I receive from others.</p><h3>Express my opinion</h3><p>Another reason is, as iOS Developer, I need to have a deep understand about the Apple ecosystem so, this will be a place to organize my thoughts about the news, products, events as WWDC‚Ä¶ but ever focused in coding</p><h3>Practice english</h3><p>And the last reason, (but no less important), practice to write tech documentation in English. My native language is Spanish, but globalization and remote working has opened a lot of opportunities. And English is today the key language for learn and work.<br><br>---</p><p>If you wanna know more about me, feel free to check my social media links (see the footer)</p><p>So, I hope you enjoy my posts! üôÇ</p>]]></content:encoded></item></channel></rss>